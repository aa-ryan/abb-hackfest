# -*- coding: utf-8 -*-
"""AryanDSATM1DT19CS023python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s4dtYvv_G3rV5ogJ9fMRsTv9OBCp6ufd

ABB-HackFest

* [Shareable Colab Link](https://colab.research.google.com/drive/1s4dtYvv_G3rV5ogJ9fMRsTv9OBCp6ufd?usp=sharing)

## How to run this notebook

* Goto **Runtime** and select **Run All**
  - Will take almost 2-5 mins depending on your internet speed.
  - When execution is completed it show *0s completed* at the bottom.
* Now unhide all cells to see all output
  - Select **Edit** then **Select All Cells** option
  - It will select all cells as a result everything is now higlighted.
  - Select **View** and click on **Expand all sections**
* Now everything is done.


#### Extras:
* Using college email ID for colab, results in extra memory and better runtime
* If seeing third party cookies error, don't worry it's nothing, if you wish enable third party cookies for colab.
* Any other issues email me at (aryan.2023y@gmail.com)

### Task Done
* Convert the data files to csv.
* [x] Cleaning of Data
	- [x] Shape of Data
	- [x] Check for NAs
	- [x] Date format
	- [x] Check Data Info
* [x] Country-wise monthly sales analysis.
* [x] Yearly-sales revenue generated Country-wise.
* [x] Predicted Dataset Generation

## NOTE: Plotly Generated Graphs is NOT supported in HTML format.
## Please prefer using the given colab link. (Linux cmds AHEAD :p)

Cloning github repository with data in it.
"""

!rm -r abb-hackfest/
!git clone https://github.com/aa-ryan/abb-hackfest

# Commented out IPython magic to ensure Python compatibility.
# %pip install plotly
# %pip install nbformat
# %pip install Prophet

import pandas as pd		
import csv		
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
import numpy as np					
import matplotlib.pyplot as plt		 
import tensorflow as tf				 
from tensorflow import keras	
import calendar
import datetime as dt
import prophet as Prophet

data = pd.read_csv('abb-hackfest/data.csv')
data.head()
print(list(data.columns))

"""Converting each column to list for better usability.

#### Check NA values
* None Found
"""

print(data.isnull().sum())

"""##### Seperate Year and Month from Date and convert month from integer to name
##### Convert Date - string to DateTime
##### Value from String to Integer
"""

data[['Year','Month']] = data.Date.str.split('-',expand=True)
data['Month'] = data['Month'].apply(lambda x: calendar.month_name[int(x)])
data['Value'] = data['Value'].str.replace(',','').astype(int)

#data['Date'] = pd.to_datetime(data['Date'], format='%Y-%m').dt.to_period('m')
print(data.dtypes)
data

"""#### Data Visualisation

#### Country Wise Monthly Sales Analysis
"""

value_order_canada = data[data['Country']=='Canada']
value_order_canada_2019 = value_order_canada[value_order_canada['Year'] == '2019']
value_order_canada_2020 = value_order_canada[value_order_canada['Year'] == '2020']
value_order_canada_2021 = value_order_canada[value_order_canada['Year'] == '2021']
value_order_canada_2022 = value_order_canada[value_order_canada['Year'] == '2022']


#print(value_order_canada_2019)

fig = go.Figure()
fig.add_trace(go.Scatter(
    name='2019',
    y = value_order_canada_2019['Value'],
    x = value_order_canada_2019['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='2020',
    y = value_order_canada_2020['Value'],
    x = value_order_canada_2020['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='2021',
    y = value_order_canada_2021['Value'],
    x = value_order_canada_2021['Month'],
    connectgaps = True
))


fig.add_trace(go.Scatter(
    name='2022',
    y = value_order_canada_2022['Value'],
    x = value_order_canada_2022['Month'],
    connectgaps = True
))


fig.update_layout(title_text='Monthly Value Sold CANADA',
                 template='plotly_dark')
fig.update_xaxes(title_text='Months')
fig.update_yaxes(title_text='Value')

fig.show()

value_order_china = data[data['Country']=='China']
value_order_china_2019 = value_order_china[value_order_china['Year'] == '2019']
value_order_china_2020 = value_order_china[value_order_china['Year'] == '2020']
value_order_china_2021 = value_order_china[value_order_china['Year'] == '2021']
value_order_china_2022 = value_order_china[value_order_china['Year'] == '2022']


#print(value_order_canada_2019)

fig = go.Figure()
fig.add_trace(go.Scatter(
    name='2019',
    y = value_order_china_2019['Value'],
    x = value_order_china_2019['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='2020',
    y = value_order_china_2020['Value'],
    x = value_order_china_2020['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='2021',
    y = value_order_china_2021['Value'],
    x = value_order_china_2021['Month'],
    connectgaps = True
))


fig.add_trace(go.Scatter(
    name='2022',
    y = value_order_china_2022['Value'],
    x = value_order_china_2022['Month'],
    connectgaps = True
))


fig.update_layout(title_text='Monthly Value Sold CHINA',
                 template='plotly_dark')
fig.update_xaxes(title_text='Months')
fig.update_yaxes(title_text='Value')

fig.show()

value_order_Germany = data[data['Country']=='Germany']
value_order_Germany_2019 = value_order_Germany[value_order_Germany['Year'] == '2019']
value_order_Germany_2020 = value_order_Germany[value_order_Germany['Year'] == '2020']
value_order_Germany_2021 = value_order_Germany[value_order_Germany['Year'] == '2021']
value_order_Germany_2022 = value_order_Germany[value_order_Germany['Year'] == '2022']


#print(value_order_Germany_2019)

fig = go.Figure()
fig.add_trace(go.Scatter(
    name='2019',
    y = value_order_Germany_2019['Value'],
    x = value_order_Germany_2019['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='2020',
    y = value_order_Germany_2020['Value'],
    x = value_order_Germany_2020['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='2021',
    y = value_order_Germany_2021['Value'],
    x = value_order_Germany_2021['Month'],
    connectgaps = True
))


fig.add_trace(go.Scatter(
    name='2022',
    y = value_order_Germany_2022['Value'],
    x = value_order_Germany_2022['Month'],
    connectgaps = True
))


fig.update_layout(title_text='Monthly Value Sold Germany',
                 template='plotly_dark')
fig.update_xaxes(title_text='Months')
fig.update_yaxes(title_text='Value')

fig.show()

value_order_Italy = data[data['Country']=='Italy']
value_order_Italy_2019 = value_order_Italy[value_order_Italy['Year'] == '2019']
value_order_Italy_2020 = value_order_Italy[value_order_Italy['Year'] == '2020']
value_order_Italy_2021 = value_order_Italy[value_order_Italy['Year'] == '2021']
value_order_Italy_2022 = value_order_Italy[value_order_Italy['Year'] == '2022']


#print(value_order_Italy_2019)

fig = go.Figure()
fig.add_trace(go.Scatter(
    name='2019',
    y = value_order_Italy_2019['Value'],
    x = value_order_Italy_2019['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='2020',
    y = value_order_Italy_2020['Value'],
    x = value_order_Italy_2020['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='2021',
    y = value_order_Italy_2021['Value'],
    x = value_order_Italy_2021['Month'],
    connectgaps = True
))


fig.add_trace(go.Scatter(
    name='2022',
    y = value_order_Italy_2022['Value'],
    x = value_order_Italy_2022['Month'],
    connectgaps = True
))


fig.update_layout(title_text='Monthly Value Sold ITALY',
                 template='plotly_dark')
fig.update_xaxes(title_text='Months')
fig.update_yaxes(title_text='Value')

fig.show()

value_order_USA = data[data['Country']=='USA']
value_order_USA_2019 = value_order_USA[value_order_USA['Year'] == '2019']
value_order_USA_2020 = value_order_USA[value_order_USA['Year'] == '2020']
value_order_USA_2021 = value_order_USA[value_order_USA['Year'] == '2021']
value_order_USA_2022 = value_order_USA[value_order_USA['Year'] == '2022']


#print(value_order_USA_2019)

fig = go.Figure()
fig.add_trace(go.Scatter(
    name='2019',
    y = value_order_USA_2019['Value'],
    x = value_order_USA_2019['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='2020',
    y = value_order_USA_2020['Value'],
    x = value_order_USA_2020['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='2021',
    y = value_order_USA_2021['Value'],
    x = value_order_USA_2021['Month'],
    connectgaps = True
))


fig.add_trace(go.Scatter(
    name='2022',
    y = value_order_USA_2022['Value'],
    x = value_order_USA_2022['Month'],
    connectgaps = True
))


fig.update_layout(title_text='Monthly Value Sold USA',
                 template='plotly_dark')
fig.update_xaxes(title_text='Months')
fig.update_yaxes(title_text='Value')

fig.show()

"""#### Year Wise Country Sales Value"""

fig = go.Figure()
fig.add_trace(go.Scatter(
    name='Canada',
    y = value_order_canada_2019['Value'],
    x = value_order_canada_2019['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='China',
    y = value_order_china_2019['Value'],
    x = value_order_china_2019['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='Germany',
    y = value_order_Germany_2019['Value'],
    x = value_order_Germany_2019['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='Italy',
    y = value_order_Italy_2019['Value'],
    x = value_order_Italy_2019['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='USA',
    y = value_order_USA_2019['Value'],
    x = value_order_USA_2019['Month'],
    connectgaps = True
))

fig.update_layout(title_text='Revenue Generated Year 2019',
                 template='plotly_dark')
fig.update_xaxes(title_text='Months')
fig.update_yaxes(title_text='Value')

fig.show()

fig = go.Figure()
fig.add_trace(go.Scatter(
    name='Canada',
    y = value_order_canada_2020['Value'],
    x = value_order_canada_2020['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='China',
    y = value_order_china_2020['Value'],
    x = value_order_china_2020['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='Germany',
    y = value_order_Germany_2020['Value'],
    x = value_order_Germany_2020['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='Italy',
    y = value_order_Italy_2020['Value'],
    x = value_order_Italy_2020['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='USA',
    y = value_order_USA_2020['Value'],
    x = value_order_USA_2020['Month'],
    connectgaps = True
))

fig.update_layout(title_text='Revenue Generated Year 2020',
                 template='plotly_dark')
fig.update_xaxes(title_text='Months')
fig.update_yaxes(title_text='Value')

fig.show()

fig = go.Figure()
fig.add_trace(go.Scatter(
    name='Canada',
    y = value_order_canada_2021['Value'],
    x = value_order_canada_2021['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='China',
    y = value_order_china_2021['Value'],
    x = value_order_china_2021['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='Germany',
    y = value_order_Germany_2021['Value'],
    x = value_order_Germany_2021['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='Italy',
    y = value_order_Italy_2021['Value'],
    x = value_order_Italy_2021['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='USA',
    y = value_order_USA_2021['Value'],
    x = value_order_USA_2021['Month'],
    connectgaps = True
))

fig.update_layout(title_text='Revenue Generated Year 2021',
                 template='plotly_dark')
fig.update_xaxes(title_text='Months')
fig.update_yaxes(title_text='Value')

fig.show()

fig = go.Figure()
fig.add_trace(go.Scatter(
    name='Canada',
    y = value_order_canada_2022['Value'],
    x = value_order_canada_2022['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='China',
    y = value_order_china_2022['Value'],
    x = value_order_china_2022['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='Germany',
    y = value_order_Germany_2022['Value'],
    x = value_order_Germany_2022['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='Italy',
    y = value_order_Italy_2022['Value'],
    x = value_order_Italy_2022['Month'],
    connectgaps = True
))

fig.add_trace(go.Scatter(
    name='USA',
    y = value_order_USA_2022['Value'],
    x = value_order_USA_2022['Month'],
    connectgaps = True
))

fig.update_layout(title_text='Revenue Generated Year 2022',
                 template='plotly_dark')
fig.update_xaxes(title_text='Months')
fig.update_yaxes(title_text='Value')

fig.show()

data.head()

"""# Prediction Making

#### Creating a Pivot Table
"""

pivot_table = data.pivot_table('Value', ['Date'], 'Country')
new_df = pivot_table.reset_index()
new_df.head()

canada_df = pd.DataFrame([new_df.Date, new_df.Canada]).transpose()
china_df = pd.DataFrame([new_df.Date, new_df.China]).transpose()
germany_df = pd.DataFrame([new_df.Date, new_df.Germany]).transpose()
italy_df = pd.DataFrame([new_df.Date, new_df.Italy]).transpose()
usa_df = pd.DataFrame([new_df.Date, new_df.USA]).transpose()

canada_df.columns = ['ds', 'y']
canada_df['y'] = pd.to_numeric(canada_df['y'])
canada_df['ds'] = pd.to_datetime(canada_df['ds'])


china_df.columns = ['ds', 'y']
china_df['y'] = pd.to_numeric(china_df['y'])
china_df['ds'] = pd.to_datetime(china_df['ds'])

germany_df.columns = ['ds', 'y']
germany_df['y'] = pd.to_numeric(germany_df['y'])
germany_df['ds'] = pd.to_datetime(germany_df['ds'])


italy_df.columns = ['ds', 'y']
italy_df['y'] = pd.to_numeric(italy_df['y'])
italy_df['ds'] = pd.to_datetime(italy_df['ds'])


usa_df.columns = ['ds', 'y']
usa_df['y'] = pd.to_numeric(usa_df['y'])
usa_df['ds'] = pd.to_datetime(usa_df['ds'])
#print(canada_df.dtypes)

"""## Insample Prediction
* A dataframe with sample data dates
"""

future = list()
for i in range(1, 13):
  date = '2019-%02d'%i
  future.append([date])
for i in range(1, 13):
  date = '2020-%02d'%i
  future.append([date])

future = pd.DataFrame(future)
future.columns = ['ds']
future['ds'] = pd.to_datetime(future['ds'])

"""##### Insample Prediction for Canada"""

p_canada = Prophet.Prophet()
model_canada = p_canada.fit(canada_df)
canada_forecast = model_canada.predict(future)
model_canada.plot(canada_forecast)
plt.show()

"""##### Insample Prediction for China



"""

p_china = Prophet.Prophet()
model_china = p_china.fit(china_df)
china_forecast = model_china.predict(future)
model_china.plot(china_forecast)
plt.show()

"""##### Insample Prediction for Germany"""

p_germany = Prophet.Prophet()
model_germany = p_germany.fit(germany_df)
germany_forecast = model_germany.predict(future)
model_germany.plot(germany_forecast)
plt.show()

"""##### Insample Prediction for Italy"""

p_italy = Prophet.Prophet()
model_italy = p_italy.fit(italy_df)
italy_forecast = model_italy.predict(future)
model_italy.plot(italy_forecast)
plt.show()

"""##### Insample Prediction for USA"""

p_usa = Prophet.Prophet()
model_usa = p_usa.fit(usa_df)
usa_forecast = model_usa.predict(future)
model_usa.plot(usa_forecast)
plt.show()

"""## Outsample Prediction"""

future = list()
for i in range(5, 13):
  date = '2022-%02d'%i
  future.append([date])
for i in range(1, 8):
  date = '2023-%02d'%i
  future.append([date])

print(future)

future = pd.DataFrame(future)
future.columns = ['ds']
future['ds'] = pd.to_datetime(future['ds'])

"""##### Outsample Prediction for Canada"""

pout_canada = Prophet.Prophet()
model_canada = pout_canada.fit(canada_df)
canada_forecast = model_canada.predict(future)
model_canada.plot(canada_forecast)
plt.show()

"""##### Outsample prediction for China"""

pout_china = Prophet.Prophet()
model_china = pout_china.fit(china_df)
china_forecast = model_china.predict(future)
model_china.plot(china_forecast)
plt.show()

"""##### Outsample prediction for Germany"""

pout_germany = Prophet.Prophet()
model_germany = pout_germany.fit(germany_df)
germany_forecast = model_germany.predict(future)
model_germany.plot(germany_forecast)
plt.show()

"""##### Outsample prediction for Italy"""

pout_italy = Prophet.Prophet()
model_italy = pout_italy.fit(italy_df)
italy_forecast = model_italy.predict(future)
model_italy.plot(italy_forecast)
plt.show()

"""##### Outsample prediction for USA"""

pout_usa = Prophet.Prophet()
model_usa = pout_usa.fit(usa_df)
usa_forecast = model_usa.predict(future)
model_usa.plot(usa_forecast)
plt.show()

"""## Evaluation of Model"""

from sklearn.metrics import mean_squared_log_error

"""#### Canada"""

#print(canada_df)

## Calculation of RMSLE between expected and predicted value
y_true = canada_df['y'][-15:].values
y_pred = canada_forecast['yhat'].values
#print(y_true.shape, y_pred.shape)
rmsle = mean_squared_log_error(y_true, y_pred)

print("RMSLE: {}".format(rmsle) )
plt.plot(y_true, label='Actual')
plt.plot(y_pred, label='Predicted')
plt.legend()
plt.show()

## Calculation of RMSLE between expected and predicted value
y_true = china_df['y'][-15:].values
y_pred = china_forecast['yhat'].values
print(y_true.shape, y_pred.shape)
rmsle = mean_squared_log_error(y_true, y_pred)

print("RMSLE: {}".format(rmsle) )
plt.plot(y_true, label='Actual')
plt.plot(y_pred, label='Predicted')
plt.legend()
plt.show()

## Calculation of RMSLE between expected and predicted value
y_true = germany_df['y'][-15:].values
y_pred = germany_forecast['yhat'].values
print(y_true.shape, y_pred.shape)
rmsle = mean_squared_log_error(y_true, y_pred)

print("RMSLE: {}".format(rmsle) )
plt.plot(y_true, label='Actual')
plt.plot(y_pred, label='Predicted')
plt.legend()
plt.show()

## Calculation of RMSLE between expected and predicted value
y_true = italy_df['y'][-15:].values
y_pred = italy_forecast['yhat'].values
print(y_true.shape, y_pred.shape)
rmsle = mean_squared_log_error(y_true, y_pred)

print("RMSLE: {}".format(rmsle) )
plt.plot(y_true, label='Actual')
plt.plot(y_pred, label='Predicted')
plt.legend()
plt.show()

## Calculation of RMSLE between expected and predicted value
y_true = usa_df['y'][-15:].values
y_pred = usa_forecast['yhat'].values
print(y_true.shape, y_pred.shape)
rmsle = mean_squared_log_error(y_true, y_pred)

print("RMSLE: {}".format(rmsle) )
plt.plot(y_true, label='Actual')
plt.plot(y_pred, label='Predicted')
plt.legend()
plt.show()

from functools import reduce
df_list = [canada_forecast[['ds', 'yhat']], china_forecast[['ds', 'yhat']], germany_forecast[['ds', 'yhat']], italy_forecast[['ds', 'yhat']], usa_forecast[['ds', 'yhat']]]
df_merged = reduce(lambda left, right: pd.merge(left, right, on=['ds'], how='outer'), df_list)

df_merged.columns = ['Date', 'Canada', 'China', 'Germany', 'Italy', 'USA']

from pandas.api.types import is_period_dtype

if not is_period_dtype(df_merged.dtypes['Date']):
  df_merged['Date'] = df_merged['Date'].dt.to_period('M')

## convert float to int
m = df_merged.select_dtypes(np.number)
df_merged[m.columns] = m.round().astype('Int64')

df_merged

df_merged.to_csv('Aryan_DSATM_1DT19CS023_submission.csv',index=False)

### Conversion to Notebook to HTML
## https://stackoverflow.com/questions/53460051/convert-ipynb-notebook-to-html-in-google-colab